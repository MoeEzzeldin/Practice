using System;
using System.Collections.Generic;
using System.Text;

class Kata
{
    public static string SendMessage(string message)
    {
        if (string.IsNullOrEmpty(message))
        {
            return "";
        }

        StringBuilder result = new StringBuilder();
        int currentKey = 0;
        int previousKey = -1;
        char currentVal = '0';
        bool isUpper = false;
        int index = 0;

        //create dictionary kvp for letters matching!
        Dictionary<int, string> keyPad = new Dictionary<int, string>
        {
            {1, ".,?!"}, {2, "abc"}, {3, "def"},
            {4, "ghi"}, {5, "jkl"}, {6, "mno"},
            {7, "pqrs"}, {8, "tuv"}, {9, "wxyz"},
            {-1, "'-+="}, {0, " "}, {-2, "case"}
        };

        for (int i = 0; i < message.Length; i++)
        {
            currentVal = message[i];
            // Handle numeric values, *, and #
            if (char.IsDigit(currentVal) || currentVal == '*' || currentVal == '#')
            {
                result.Append(currentVal);
                result.Append('-');
                previousKey = currentKey;
            }
            // Handle case toggle
            if (char.IsUpper(currentVal) && !isUpper)
            {
                result.Append('#');
                isUpper = true;
                previousKey = currentKey;
            }
            else if (char.IsLower(currentVal) && isUpper)
            {
                result.Append('#');
                isUpper = false;
                previousKey = currentKey;
            }
            foreach (KeyValuePair<int, string> kvp in keyPad)
            {
                if (kvp.Value.Contains(char.ToLower(currentVal)))
                {
                    currentKey = kvp.Key;
                    index = kvp.Value.IndexOf(char.ToLower(currentVal));
                    // Insert a space if the same key is used consecutively
                    if (currentKey == previousKey && result[result.Length - 1] != '-')
                    {
                      result.Append(' ');
                    }
                  for (int j = 0; j <= index; j++)
                  {
                      if (currentKey == -1)
                      {
                          result.Append('*');
                          previousKey = currentKey;
                          continue;
                      }
                      else if (currentKey == -2)
                      {
                          result.Append('#');
                          previousKey = currentKey;
                          continue;
                      }
                          result.Append(currentKey);   
                }
                    previousKey = currentKey;
                    break;
                }
            }
        }

        return result.ToString();
    }
}
